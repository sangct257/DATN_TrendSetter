package com.example.datn_trendsetter.Service;

import com.example.datn_trendsetter.DTO.ProductInfoDTO;
import com.example.datn_trendsetter.Entity.*;
import com.example.datn_trendsetter.Repository.*;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.query.Param;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class HoaDonChiTietService {
    @Autowired
    private HoaDonChiTietRepository hoaDonChiTietRepository;
    @Autowired
    private SanPhamChiTietRepository sanPhamChiTietRepository;
    @Autowired
    private HoaDonRepository hoaDonRepository;
    @Autowired
    private SanPhamRepository sanPhamRepository;
    @Autowired
    private PhieuGiamGiaRepository phieuGiamGiaRepository;

    public ResponseEntity<Map<String, String>> addProductDetailToHoaDon(Integer sanPhamChiTietId, Integer hoaDonId, Integer soLuong) {
        Map<String, String> response = new HashMap<>();

        // Ki·ªÉm tra s·∫£n ph·∫©m chi ti·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
        SanPhamChiTiet sanPhamChiTiet = sanPhamChiTietRepository.findById(sanPhamChiTietId).orElse(null);
        if (sanPhamChiTiet == null) {
            response.put("errorMessage", "S·∫£n ph·∫©m chi ti·∫øt kh√¥ng t·ªìn t·∫°i!");
            return ResponseEntity.badRequest().body(response);
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng nh·∫≠p v√†o
        if (soLuong < 1) {
            response.put("errorMessage", "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!");
            return ResponseEntity.badRequest().body(response);
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
        if (sanPhamChiTiet.getSoLuong() < soLuong) {
            response.put("errorMessage", "S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß.");
            return ResponseEntity.badRequest().body(response);
        }

        // Ki·ªÉm tra h√≥a ƒë∆°n t·ªìn t·∫°i
        HoaDon hoaDon = hoaDonRepository.findById(hoaDonId).orElse(null);
        if (hoaDon == null) {
            response.put("errorMessage", "H√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i!");
            return ResponseEntity.badRequest().body(response);
        }

        // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong h√≥a ƒë∆°n ch∆∞a
        HoaDonChiTiet hoaDonChiTiet = hoaDonChiTietRepository.findByHoaDonIdAndSanPhamChiTietId(hoaDonId, sanPhamChiTietId)
                .orElse(new HoaDonChiTiet());

        // C·∫≠p nh·∫≠t ho·∫∑c th√™m m·ªõi s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n chi ti·∫øt
        int soLuongMoi = (hoaDonChiTiet.getSoLuong() != null ? hoaDonChiTiet.getSoLuong() : 0) + soLuong;
        hoaDonChiTiet.setHoaDon(hoaDon);
        hoaDonChiTiet.setSanPhamChiTiet(sanPhamChiTiet);
        hoaDonChiTiet.setSoLuong(soLuongMoi);
        hoaDonChiTiet.setGia(sanPhamChiTiet.getGia().floatValue());
        hoaDonChiTiet.setThanhTien(soLuongMoi * hoaDonChiTiet.getGia());

        hoaDonChiTietRepository.save(hoaDonChiTiet);

        // Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa s·∫£n ph·∫©m chi ti·∫øt
        sanPhamChiTiet.setSoLuong(sanPhamChiTiet.getSoLuong() - soLuong);

        // Ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu s·∫£n ph·∫©m ƒëang l√† "C√≤n H√†ng"
        if (sanPhamChiTiet.getSoLuong() == 0 && "C√≤n H√†ng".equals(sanPhamChiTiet.getTrangThai())) {
            sanPhamChiTiet.setTrangThai("H·∫øt H√†ng");
        }

        sanPhamChiTietRepository.save(sanPhamChiTiet);

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa s·∫£n ph·∫©m ch√≠nh
        updateStockForProduct(sanPhamChiTiet.getSanPham());

        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn h√≥a ƒë∆°n
        updateInvoiceTotal(hoaDonId);

        // üî• L·∫§Y L·∫†I h√≥a ƒë∆°n t·ª´ DB ƒë·ªÉ ƒë·∫£m b·∫£o t·ªïng ti·ªÅn m·ªõi nh·∫•t
        hoaDon = hoaDonRepository.findById(hoaDonId).orElse(null);

        // Tr·∫£ v·ªÅ th√¥ng tin c·∫≠p nh·∫≠t
        response.put("successMessage", "Th√™m s·∫£n ph·∫©m v√†o h√≥a ƒë∆°n th√†nh c√¥ng!");
        response.put("tongTien", String.valueOf(hoaDon.getTongTien()));
        response.put("trangThai", hoaDon.getTrangThai());
        return ResponseEntity.ok(response);
    }

    public ResponseEntity<Map<String, String>> updateQuantityOrder(Integer hoaDonChiTietId, Integer soLuong, Integer hoaDonId) {
        Map<String, String> response = new HashMap<>();

        // Ki·ªÉm tra h√≥a ƒë∆°n chi ti·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
        HoaDonChiTiet hoaDonChiTiet = hoaDonChiTietRepository.findById(hoaDonChiTietId).orElse(null);
        if (hoaDonChiTiet == null) {
            response.put("errorMessage", "H√≥a ƒë∆°n chi ti·∫øt kh√¥ng t·ªìn t·∫°i!");
            return ResponseEntity.badRequest().body(response);
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng h·ª£p l·ªá
        if (soLuong < 1) {
            response.put("errorMessage", "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!");
            return ResponseEntity.badRequest().body(response);
        }

        // L·∫•y s·∫£n ph·∫©m chi ti·∫øt v√† ki·ªÉm tra t·ªìn kho
        SanPhamChiTiet sanPhamChiTiet = hoaDonChiTiet.getSanPhamChiTiet();
        if (sanPhamChiTiet == null) {
            response.put("errorMessage", "S·∫£n ph·∫©m chi ti·∫øt kh√¥ng t·ªìn t·∫°i!");
            return ResponseEntity.badRequest().body(response);
        }

        int soLuongTonKho = sanPhamChiTiet.getSoLuong();
        int soLuongCu = hoaDonChiTiet.getSoLuong();
        int chenhLechSoLuong = soLuong - soLuongCu; // S·ªë l∆∞·ª£ng thay ƒë·ªïi (c√≥ th·ªÉ √¢m n·∫øu gi·∫£m)

        // N·∫øu tƒÉng s·ªë l∆∞·ª£ng, ki·ªÉm tra t·ªìn kho
        if (chenhLechSoLuong > 0 && soLuongTonKho < chenhLechSoLuong) {
            response.put("errorMessage", "S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß.");
            return ResponseEntity.badRequest().body(response);
        }

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng h√≥a ƒë∆°n chi ti·∫øt
        hoaDonChiTiet.setSoLuong(soLuong);
        hoaDonChiTiet.setThanhTien(sanPhamChiTiet.getGia().floatValue() * soLuong);
        hoaDonChiTietRepository.save(hoaDonChiTiet);

        // C·∫≠p nh·∫≠t t·ªìn kho n·∫øu s·ªë l∆∞·ª£ng thay ƒë·ªïi
        sanPhamChiTiet.setSoLuong(soLuongTonKho - chenhLechSoLuong);
        sanPhamChiTiet.setTrangThai(sanPhamChiTiet.getSoLuong() == 0 ? "H·∫øt H√†ng" : "C√≤n H√†ng");
        sanPhamChiTietRepository.save(sanPhamChiTiet);

        // C·∫≠p nh·∫≠t t·ªìn kho s·∫£n ph·∫©m ch√≠nh
        updateStockForProduct(sanPhamChiTiet.getSanPham());

        // Ki·ªÉm tra h√≥a ƒë∆°n c√≥ t·ªìn t·∫°i kh√¥ng
        HoaDon hoaDon = hoaDonRepository.findById(hoaDonId).orElse(null);
        if (hoaDon == null) {
            response.put("errorMessage", "H√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i!");
            return ResponseEntity.badRequest().body(response);
        }

        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn h√≥a ƒë∆°n
        updateInvoiceTotal(hoaDonId);

        // T√≠nh l·∫°i t·ªïng ti·ªÅn h√≥a ƒë∆°n ƒë·ªÉ √°p d·ª•ng phi·∫øu gi·∫£m gi√°
        float tongTienSanPham = (float) hoaDonChiTietRepository.findByHoaDonId(hoaDonId).stream()
                .mapToDouble(HoaDonChiTiet::getThanhTien)
                .sum();

        float phiShip = (hoaDon.getPhiShip() != null) ? hoaDon.getPhiShip() : 0;

        // T√¨m v√† √°p d·ª•ng phi·∫øu gi·∫£m gi√° t·ªët nh·∫•t
        PhieuGiamGia bestVoucher = findBestVoucherForInvoice(tongTienSanPham);
        hoaDon.setPhieuGiamGia(bestVoucher);

        // T√≠nh gi√° tr·ªã gi·∫£m gi√° t·ª´ phi·∫øu (n·∫øu c√≥)
        float giaTriGiam = (bestVoucher != null && bestVoucher.getGiaTri() != null) ? bestVoucher.getGiaTri() : 0;

        // ƒê·∫£m b·∫£o t·ªïng ti·ªÅn kh√¥ng b·ªã √¢m
        float tongTienFinal = Math.max(0, tongTienSanPham + phiShip - giaTriGiam);

        hoaDon.setTongTien(tongTienFinal);
        hoaDonRepository.save(hoaDon);

        // Tr·∫£ v·ªÅ tr·∫°ng th√°i h√≥a ƒë∆°n
        response.put("successMessage", "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m th√†nh c√¥ng!");
        response.put("trangThai", hoaDon.getTrangThai());
        return ResponseEntity.ok(response);
    }

    public ResponseEntity<Map<String, String>> deleteProductOrder(Integer hoaDonChiTietId, Integer hoaDonId) {
        Map<String, String> response = new HashMap<>();

        // T√¨m h√≥a ƒë∆°n chi ti·∫øt c·∫ßn x√≥a
        HoaDonChiTiet hoaDonChiTiet = hoaDonChiTietRepository.findById(hoaDonChiTietId).orElse(null);
        if (hoaDonChiTiet == null) {
            response.put("errorMessage", "H√≥a ƒë∆°n chi ti·∫øt kh√¥ng t·ªìn t·∫°i!");
            return ResponseEntity.badRequest().body(response);
        }

        // Ki·ªÉm tra h√≥a ƒë∆°n c√≥ t·ªìn t·∫°i kh√¥ng
        HoaDon hoaDon = hoaDonRepository.findById(hoaDonId).orElse(null);
        if (hoaDon == null) {
            response.put("errorMessage", "H√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i.");
            return ResponseEntity.badRequest().body(response);
        }

        // L·∫•y th√¥ng tin s·∫£n ph·∫©m chi ti·∫øt
        SanPhamChiTiet sanPhamChiTiet = hoaDonChiTiet.getSanPhamChiTiet();
        if (sanPhamChiTiet != null) {
            // Ho√†n tr·∫£ l·∫°i s·ªë l∆∞·ª£ng s·∫£n ph·∫©m v·ªÅ kho
            sanPhamChiTiet.setSoLuong(sanPhamChiTiet.getSoLuong() + hoaDonChiTiet.getSoLuong());
            sanPhamChiTietRepository.save(sanPhamChiTiet);

            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho cho s·∫£n ph·∫©m ch√≠nh
            updateStockForProduct(sanPhamChiTiet.getSanPham());
        }

        // X√≥a s·∫£n ph·∫©m kh·ªèi h√≥a ƒë∆°n
        hoaDonChiTietRepository.delete(hoaDonChiTiet);

        // C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn h√≥a ƒë∆°n sau khi x√≥a s·∫£n ph·∫©m
        float tongTienSanPham = hoaDon.getHoaDonChiTiet()
                .stream()
                .map(chiTiet -> chiTiet.getThanhTien())
                .reduce(0f, Float::sum);

        float phiShip = (hoaDon.getPhiShip() != null) ? hoaDon.getPhiShip() : 0;

        // Ki·ªÉm tra phi·∫øu gi·∫£m gi√° t·ªët nh·∫•t d·ª±a tr√™n t·ªïng ti·ªÅn m·ªõi
        PhieuGiamGia bestVoucher = findBestVoucherForInvoice(tongTienSanPham);
        hoaDon.setPhieuGiamGia(bestVoucher);

        float giaTriGiam = (bestVoucher != null && bestVoucher.getGiaTri() != null) ? bestVoucher.getGiaTri() : 0;

        // ƒê·∫£m b·∫£o t·ªïng ti·ªÅn kh√¥ng b·ªã √¢m
        float tongTienFinal = Math.max(0, tongTienSanPham + phiShip - giaTriGiam);
        hoaDon.setTongTien(tongTienFinal);

        // Ki·ªÉm tra n·∫øu h√≥a ƒë∆°n kh√¥ng c√≤n s·∫£n ph·∫©m n√†o -> c·∫≠p nh·∫≠t tr·∫°ng th√°i "ƒê√£ h·ªßy"
        if (hoaDon.getHoaDonChiTiet().isEmpty()) {
            hoaDon.setTrangThai("ƒêang X·ª≠ L√Ω");
        }

        hoaDonRepository.save(hoaDon);

        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
        response.put("successMessage", "X√≥a s·∫£n ph·∫©m kh·ªèi h√≥a ƒë∆°n th√†nh c√¥ng!");
        response.put("trangThai", hoaDon.getTrangThai());
        return ResponseEntity.ok(response);
    }

    // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t t·ªìn kho cho s·∫£n ph·∫©m ch√≠nh
    private void updateStockForProduct(SanPham sanPham) {
        List<SanPhamChiTiet> listSanPhamChiTiet = sanPhamChiTietRepository.findBySanPham(sanPham);
        int tongSoLuong = listSanPhamChiTiet.stream()
                .filter(spct -> spct.getSoLuong() != null)
                .mapToInt(SanPhamChiTiet::getSoLuong)
                .sum();
        sanPham.setSoLuong(tongSoLuong);
        sanPhamRepository.save(sanPham);
    }

    private void updateInvoiceTotal(Integer hoaDonId) {
        HoaDon hoaDon = hoaDonRepository.findById(hoaDonId).orElse(null);
        if (hoaDon == null) {
            return; // N·∫øu h√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t
        }

        // T√≠nh t·ªïng ti·ªÅn s·∫£n ph·∫©m t·ª´ danh s√°ch h√≥a ƒë∆°n chi ti·∫øt
        float tongTienSanPham = (float) hoaDonChiTietRepository.findByHoaDonId(hoaDonId).stream()
                .mapToDouble(HoaDonChiTiet::getThanhTien)
                .sum();

        // L·∫•y ph√≠ ship v√† ki·ªÉm tra null
        float phiShip = (hoaDon.getPhiShip() != null) ? hoaDon.getPhiShip() : 0;

        // T√¨m phi·∫øu gi·∫£m gi√° t·ªët nh·∫•t
        PhieuGiamGia bestVoucher = findBestVoucherForInvoice(tongTienSanPham);
        hoaDon.setPhieuGiamGia(bestVoucher);

        // Gi√° tr·ªã gi·∫£m gi√° t·ª´ phi·∫øu (n·∫øu c√≥)
        float giaTriGiam = (bestVoucher != null && bestVoucher.getGiaTri() != null) ? bestVoucher.getGiaTri() : 0;

        // ƒê·∫£m b·∫£o t·ªïng ti·ªÅn kh√¥ng √¢m
        float tongTienFinal = Math.max(0, tongTienSanPham + phiShip - giaTriGiam);

        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn cho h√≥a ƒë∆°n
        hoaDon.setTongTien(tongTienFinal);
        hoaDonRepository.save(hoaDon);
    }


    public PhieuGiamGia findBestVoucherForInvoice(Float tongTien) {
        // L·∫•y danh s√°ch c√°c phi·∫øu gi·∫£m gi√° c√≤n hi·ªáu l·ª±c v√† ƒëang ho·∫°t ƒë·ªông
        List<PhieuGiamGia> availableVouchers = phieuGiamGiaRepository.findAllByTrangThai("ƒêang Ho·∫°t ƒê·ªông");

        // L·ªçc c√°c phi·∫øu gi·∫£m gi√° c√≥ ƒëi·ªÅu ki·ªán ph√π h·ª£p v·ªõi t·ªïng ti·ªÅn h√≥a ƒë∆°n
        List<PhieuGiamGia> validVouchers = availableVouchers.stream()
                .filter(voucher -> tongTien >= voucher.getDieuKien())  // ƒêi·ªÅu ki·ªán t·ªïng ti·ªÅn >= ƒëi·ªÅu ki·ªán phi·∫øu gi·∫£m gi√°
                .filter(voucher -> voucher.getNgayBatDau().isBefore(LocalDateTime.now()) &&  // Phi·∫øu gi·∫£m gi√° c√≤n hi·ªáu l·ª±c
                        voucher.getNgayKetThuc().isAfter(LocalDateTime.now()))
                .sorted(Comparator.comparing(PhieuGiamGia::getGiaTri).reversed())  // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo gi√° tr·ªã phi·∫øu
                .toList();

        // Tr·∫£ v·ªÅ phi·∫øu gi·∫£m gi√° c√≥ gi√° tr·ªã cao nh·∫•t n·∫øu c√≥, n·∫øu kh√¥ng tr·∫£ v·ªÅ null
        return validVouchers.isEmpty() ? null : validVouchers.get(0);
    }

    public int getTongSanPhamBanTrongThang() {
        return hoaDonChiTietRepository.getTongSanPhamBanTrongThang("ƒê√£ Ho√†n Th√†nh");
    }
    public List<Object[]> getTotalSoldByProductInMonthWithImages() {
        return hoaDonChiTietRepository.getTotalSoldByProductInMonth("ƒê√£ Ho√†n Th√†nh"); // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m
    }

}
