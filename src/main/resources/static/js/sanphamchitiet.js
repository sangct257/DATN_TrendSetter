let productList = []; // L∆∞u to√†n b·ªô danh s√°ch s·∫£n ph·∫©m
let selectedSize = null;
let selectedColor = null;

// üöÄ H√†m l·∫•y chi ti·∫øt s·∫£n ph·∫©m
async function fetchProductDetails(productId) {
    try {
        const response = await fetch(`http://localhost:8080/api/san-pham-chi-tiet/${productId}`);
        if (!response.ok) {
            throw new Error(`L·ªói API! M√£ tr·∫°ng th√°i: ${response.status}`);
        }
        productList = await response.json();

        if (!Array.isArray(productList) || productList.length === 0) {
            throw new Error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng!");
        }

        updateProductDetails(productList);
    } catch (error) {
        console.error('L·ªói khi t·∫£i s·∫£n ph·∫©m:', error);
    }
}

// üöÄ C·∫≠p nh·∫≠t giao di·ªán s·∫£n ph·∫©m
function updateProductDetails(products) {
    const firstProduct = products[0];

    document.querySelector('.product-title').textContent = firstProduct.tenSanPham || "Kh√¥ng c√≥ t√™n s·∫£n ph·∫©m";
    document.querySelector('.product-description').textContent = firstProduct.moTa || "M√¥ t·∫£ ch∆∞a c·∫≠p nh·∫≠t";

    const allImages = [...new Set(products.flatMap(p => p.hinhAnh))];
    document.getElementById('mainImage').src = allImages[0] || "https://via.placeholder.com/300";
    document.querySelector('.thumbnails').innerHTML = allImages.map((img, index) => `
        <img src="${img}" alt="Thumbnail ${index}" onclick="changeImage('${img}')">
    `).join('');

    // üöÄ Hi·ªÉn th·ªã m√†u s·∫Øc
    const colors = [...new Set(products.map(p => p.tenMauSac))];
    let firstAvailableColor = null;
    const colorOptions = document.getElementById('color-options');
    colorOptions.innerHTML = colors.map((color) => {
        const isDisabled = !products.some(p => p.tenMauSac === color);
        if (!isDisabled && !firstAvailableColor) firstAvailableColor = color;

        return `
            <div class="swatch-1-s color-swatch ${isDisabled ? 'disabled' : ''}" 
                 data-color="${color}">${color}</div>
        `;
    }).join('');

    // üöÄ Hi·ªÉn th·ªã size
    const sizes = [...new Set(products.flatMap(p => p.sizes))];
    let firstAvailableSize = null;
    const sizeOptions = document.getElementById('size-options');
    sizeOptions.innerHTML = sizes.map((size) => {
        const isDisabled = !products.some(p => p.sizes.includes(size));
        if (!isDisabled && !firstAvailableSize) firstAvailableSize = size;

        return `
            <div class="swatch-1-s size-swatch ${isDisabled ? 'disabled' : ''}" 
                 data-size="${size}">${size}</div>
        `;
    }).join('');

    // üî• G√°n s·ª± ki·ªán ch·ªçn m√†u b·∫±ng addEventListener
    document.querySelectorAll('.color-swatch').forEach(el => {
        el.addEventListener('click', function () {
            if (!this.classList.contains('disabled')) {
                selectColor(this, this.dataset.color);
            }
        });
    });

    // üî• G√°n s·ª± ki·ªán ch·ªçn size b·∫±ng addEventListener
    document.querySelectorAll('.size-swatch').forEach(el => {
        el.addEventListener('click', function () {
            if (!this.classList.contains('disabled')) {
                selectSize(this, this.dataset.size);
            }
        });
    });

    selectedColor = null;
    selectedSize = null;

    updatePrice();
}
// üöÄ Ch·ªçn m√†u s·∫Øc
// üöÄ Ch·ªçn m√†u s·∫Øc
function selectColor(element, color) {
    if (element.classList.contains('disabled')) return;

    // X√≥a ch·ªçn m√†u c≈©
    document.querySelectorAll('.color-swatch').forEach(el => el.classList.remove('selected'));
    element.classList.add('selected');
    selectedColor = color;

    // L·ªçc danh s√°ch size h·ª£p l·ªá cho m√†u m·ªõi
    const availableProducts = productList.filter(p => p.tenMauSac === selectedColor);
    const availableSizes = availableProducts.flatMap(p => p.sizes);

    // C·∫≠p nh·∫≠t danh s√°ch size
    let firstAvailableSize = null;
    document.querySelectorAll('.size-swatch').forEach(el => {
        const size = el.dataset.size;
        if (availableSizes.includes(size)) {
            el.classList.remove('disabled');
            el.addEventListener("click", function () {
                selectSize(el, size);
            });

            if (!firstAvailableSize) firstAvailableSize = size; // L·∫•y size ƒë·∫ßu ti√™n c√≤n h√†ng
        } else {
            el.classList.add('disabled');
            el.removeEventListener("click", function () {
                selectSize(el, size);
            });
        }
    });

    // N·∫øu size c≈© kh√¥ng h·ª£p l·ªá, ch·ªçn size ƒë·∫ßu ti√™n c√≤n h√†ng
    if (!availableSizes.includes(selectedSize)) {
        selectedSize = firstAvailableSize;
    }

    // C·∫≠p nh·∫≠t giao di·ªán size
    document.querySelectorAll('.size-swatch').forEach(el => {
        el.classList.remove('selected');
        if (el.dataset.size === selectedSize) {
            el.classList.add('selected');
        }
    });

    // üöÄ C·∫≠p nh·∫≠t ·∫£nh theo m√†u s·∫Øc
    const colorImages = availableProducts.flatMap(p => p.hinhAnh);
    if (colorImages.length > 0) {
        document.getElementById('mainImage').src = colorImages[0]; // L·∫•y ·∫£nh ƒë·∫ßu ti√™n
    }

    updatePrice();
}





// üöÄ Ch·ªçn size
function selectSize(element, size) {
    if (element.classList.contains('disabled')) return;

    document.querySelectorAll('.size-swatch').forEach(el => el.classList.remove('selected'));
    element.classList.add('selected');
    selectedSize = size;

    updatePrice();
}

// üöÄ C·∫≠p nh·∫≠t gi√° theo l·ª±a ch·ªçn
function updatePrice() {
    const selectedProduct = productList.find(p => p.tenMauSac === selectedColor && p.sizes.includes(selectedSize));

    if (selectedProduct) {
        document.querySelector('.product-price').textContent =
            `${selectedProduct.gia.toLocaleString('vi-VN')} VNƒê`;
    }
}

// üöÄ Thay ƒë·ªïi ·∫£nh ch√≠nh khi b·∫•m ·∫£nh nh·ªè
function changeImage(imageSrc) {
    document.getElementById('mainImage').src = imageSrc;
}

// üöÄ X·ª≠ l√Ω s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
function increaseQuantity() {
    let quantityInput = document.getElementById('quantity');
    quantityInput.value = parseInt(quantityInput.value) + 1;
}

function decreaseQuantity() {
    let quantityInput = document.getElementById('quantity');
    if (parseInt(quantityInput.value) > 1) {
        quantityInput.value = parseInt(quantityInput.value) - 1;
    }
}

// üöÄ Ch·∫°y khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", () => {
    const productId = new URLSearchParams(window.location.search).get('id');
    if (productId) {
        fetchProductDetails(productId);
    }
});

// üîπ H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng tr√™n gi·ªè h√†ng
function updateCartBadge() {
    let cart = JSON.parse(localStorage.getItem("cart")) || [];
    let totalQuantity = cart.reduce((sum, item) => sum + item.quantity, 0);

    // C·∫≠p nh·∫≠t s·ªë tr√™n badge
    document.querySelector(".badge").textContent = totalQuantity;
}

// üîπ G·ªçi h√†m c·∫≠p nh·∫≠t ngay khi t·∫£i trang
document.addEventListener("DOMContentLoaded", updateCartBadge);
// üîπ Th√™m v√†o gi·ªè h√†ng
// üîπ Th√™m v√†o gi·ªè h√†ng
document.querySelector(".buy-button").addEventListener("click", function (event) {
    event.preventDefault();

    if (!selectedColor || !selectedSize) {
        Swal.fire({
            icon: "warning",
            title: "Vui l√≤ng ch·ªçn m√†u s·∫Øc v√† size!",
            text: "B·∫°n c·∫ßn ch·ªçn ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng.",
            confirmButtonText: "OK"
        });
        return;
    }

    const selectedProduct = productList.find(p => p.tenMauSac === selectedColor && p.sizes.includes(selectedSize));

    if (!selectedProduct) {
        Swal.fire({
            icon: "error",
            title: "S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!",
            text: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi l·ª±a ch·ªçn c·ªßa b·∫°n.",
            confirmButtonText: "OK"
        });
        return;
    }

    // ‚úÖ L·∫•y ID s·∫£n ph·∫©m chi ti·∫øt thay v√¨ ID s·∫£n ph·∫©m chung
    const idSanPhamChiTiet = selectedProduct.idSanPhamChiTiet;
    const availableQuantity = selectedProduct.soLuongTheoSize[selectedSize] || 0;

    let quantityInput = document.getElementById('quantity');
    let quantity = parseInt(quantityInput.value);

    if (isNaN(quantity) || quantity <= 0) {
        Swal.fire({
            icon: "warning",
            title: "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!",
            text: "Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá.",
            confirmButtonText: "OK"
        });
        return;
    }

    if (quantity > availableQuantity) {
        Swal.fire({
            icon: "warning",
            title: "Kh√¥ng ƒë·ªß h√†ng!",
            text: `Ch·ªâ c√≤n ${availableQuantity} s·∫£n ph·∫©m trong kho.`,
            confirmButtonText: "OK"
        });
        return;
    }

    let cart = JSON.parse(localStorage.getItem("cart")) || [];
    let existingProduct = cart.find(item => item.idSanPhamChiTiet === idSanPhamChiTiet);

    if (existingProduct) {
        if (existingProduct.quantity + quantity > availableQuantity) {
            Swal.fire({
                icon: "warning",
                title: "Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng!",
                html: `
                    <p><strong>B·∫°n ƒë√£ c√≥ ${existingProduct.quantity} s·∫£n ph·∫©m trong gi·ªè.</strong></p>
                    <p>S·ªë l∆∞·ª£ng y√™u c·∫ßu <strong>v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho</strong> (<strong>${availableQuantity}</strong>).</p>
                    <p>‚ö†Ô∏è Mong qu√Ω kh√°ch th√¥ng c·∫£m v√† vui l√≤ng ƒëi·ªÅu ch·ªânh l·∫°i s·ªë l∆∞·ª£ng!</p>
                `,
                confirmButtonText: "OK"
            });
            return;
        }
        existingProduct.quantity += quantity;
    } else {
        cart.push({
            idSanPhamChiTiet: idSanPhamChiTiet,
            name: selectedProduct.tenSanPham,
            price: selectedProduct.gia.toLocaleString('vi-VN'),
            size: selectedSize,
            color: selectedColor,
            image: document.getElementById('mainImage').src,
            quantity: quantity,
            availableQuantity: availableQuantity
        });
    }

    localStorage.setItem("cart", JSON.stringify(cart));
    updateCartBadge();

    Swal.fire({
        icon: "success",
        title: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!",
        text: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng.",
        confirmButtonText: "Ti·∫øp t·ª•c mua s·∫Øm"
    });

    console.log("S·∫£n ph·∫©m ƒë√£ th√™m v√†o gi·ªè h√†ng:", {
        idSanPhamChiTiet: idSanPhamChiTiet,
        name: selectedProduct.tenSanPham,
        price: selectedProduct.gia,
        size: selectedSize,
        color: selectedColor,
        image: document.getElementById('mainImage').src,
        quantity: existingProduct ? existingProduct.quantity : quantity
    });

    console.log("Gi·ªè h√†ng hi·ªán t·∫°i:", JSON.parse(localStorage.getItem("cart")));
});




